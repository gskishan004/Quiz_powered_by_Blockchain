***************************************************************
Magicical bundle get your contract up and running using node 
***************************************************************
***************************************************************

#Using nodeJS console for entire process 

Setting up dev env:
---------------------------------------------------------------
mkdir node_modules
npm install ganache-cli
ganache-cli --accounts 100 --gasPrice 0 --db="./data/save/" -d --seed 4324


Contract
---------------------------------------------------------------
*saved as Quiz.sol
npm install solc  // to complile the above

// initialize solc and web3 objs
---------------------------------
node
Web3 = require('web3')
web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));
web3.eth.accounts
// * if the above does not give any accounts try reinstalling web3 using below commands :
npm uninstall web3
npm install web3@0.20.1 --save


// complile the contract
---------------------------------
code = fs.readFileSync('Quiz.sol').toString()
solc = require('solc')
compiledCode = solc.compile(code)


Deploying the contract
---------------------------------------------------------------

abiDefinition = JSON.parse(compiledCode.contracts[':Quiz'].interface)
QuizContract = web3.eth.contract(abiDefinition)
byteCode = compiledCode.contracts[':Quiz'].bytecode
deployedContract = QuizContract.new({from: web3.eth.accounts[0], gas:1})
deployedContract.address
contractInstance = QuizContract.at(deployedContract.address)

Interacting with contract
---------------------------------------------------------------
> contractInstance.totalVotesFor.call('Rama')
{ [String: '0'] s: 1, e: 0, c: [ 0 ] }
> contractInstance.voteForCandidate('Rama', {from: web3.eth.accounts[0]})
'0xdedc7ae544c3dde74ab5a0b07422c5a51b5240603d31074f5b75c0ebc786bf53'
> contractInstance.voteForCandidate('Rama', {from: web3.eth.accounts[0]})
'0x02c054d238038d68b65d55770fabfca592a5cf6590229ab91bbe7cd72da46de9'
> contractInstance.voteForCandidate('Rama', {from: web3.eth.accounts[0]})
'0x3da069a09577514f2baaa11bc3015a16edf26aad28dffbcd126bde2e71f2b76f'
> contractInstance.totalVotesFor.call('Rama').toLocaleString()
'3'


***************************************************************
Magicical bundle get your contract up and running using Truffle 
***************************************************************
***************************************************************

truffle init
truffle compile
truffle migrate --network development

--------------------------
Solutions to common errors 
--------------------------

*if the above commands opens truffle js then use below command and try again:
	set PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JSE;.WSF;.WSH;.MSC

*if there is error : Error: Attempting to run transaction which calls a contract function, but recipient address ..
	delete the .json files under build/contracts/. Then the next run of truffle migrate no longer fails.

*VM Exception while processing transaction: revert
	check contract address

*Error: VM Exception while processing transaction: revert
	fix the ABI defination 



USING INFURA which is a hosted Ethereum node cluster that lets your users run your application without requiring them to set up their own Ethereum node or wallet. 


npm install truffle-hdwallet-provider

https://ropsten.infura.io/cB2USDTPPAJ523I9LSxP
truffle migrate --network ropsten

Metamask - PWD
qwerty1234